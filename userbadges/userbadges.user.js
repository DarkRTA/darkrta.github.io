// ==UserScript==
// @name            FFZ UserBadges
// @description     FrankerFaceZ addon to allow badges to be assigned to users locally.
// @author          Dark
// @include		http://twitch.tv/*
// @include		https://twitch.tv/*
// @include		http://*.twitch.tv/*
// @include		https://*.twitch.tv/*
// @exclude		http://api.twitch.tv/*
// @exclude		https://api.twitch.tv/*
// @grant		none
// @run-at		document-end
// ==/UserScript==


function loadBadgeManager(attempts) {
    if (window.FrankerFaceZ !== undefined) {
        var script = document.createElement('script');
        script.src = 'data:text/javascript;base64,'
        document.head.appendChild(script)
    } else {
        attempts = (attempts || 0) + 1;
        if (attempts < 60)
            return setTimeout(loadBadgeManager.bind(this, attempts), 1000);
        console.log('[FFZ Userbadges] Could not find FFZ. Injection unsuccessful.');
    }
}

loadBadgeManager();


